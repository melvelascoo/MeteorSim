/**
 * Results Panel Component
 */

import { Zap, Gauge, Users, Waves, Mountain, AlertTriangle, Shield } from 'lucide-react';
import { ImpactResults } from '../services/impactCalculations';
import { MitigationResult } from '../services/mitigationService';

interface ResultsPanelProps {
  results: ImpactResults;
  mitigation?: MitigationResult | null;
}

export default function ResultsPanel({ results, mitigation }: ResultsPanelProps) {
  const formatNumber = (num: number): string => {
    if (num >= 1e9) return `${(num / 1e9).toFixed(2)}B`;
    if (num >= 1e6) return `${(num / 1e6).toFixed(2)}M`;
    if (num >= 1e3) return `${(num / 1e3).toFixed(2)}K`;
    return num.toFixed(0);
  };

  const getDangerLevel = (energy: number): { level: string; color: string; description: string } => {
    if (energy < 1) return {
      level: 'Minimal',
      color: 'text-green-600',
      description: 'Local damage only'
    };
    if (energy < 100) return {
      level: 'Moderate',
      color: 'text-yellow-600',
      description: 'Regional devastation'
    };
    if (energy < 10000) return {
      level: 'Severe',
      color: 'text-orange-600',
      description: 'Continental effects'
    };
    if (energy < 1000000) return {
      level: 'Catastrophic',
      color: 'text-red-600',
      description: 'Global climate impact'
    };
    return {
      level: 'Extinction Event',
      color: 'text-purple-600',
      description: 'Mass extinction scenario'
    };
  };

  const dangerLevel = getDangerLevel(results.energy);

  return (
    <div className="bg-white rounded-lg shadow-xl overflow-hidden">
      <div className="bg-gradient-to-r from-red-600 to-red-800 text-white p-4">
        <h2 className="text-lg font-bold flex items-center gap-2">
          <AlertTriangle className="w-5 h-5" />
          Impact Analysis Results
        </h2>
      </div>

      <div className="p-6 space-y-4">
        <div className="bg-gradient-to-br from-red-50 to-orange-50 p-4 rounded-lg border-l-4 border-red-600">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-semibold text-gray-700">Danger Level</span>
            <span className={`text-2xl font-bold ${dangerLevel.color}`}>
              {dangerLevel.level}
            </span>
          </div>
          <p className="text-sm text-gray-600">{dangerLevel.description}</p>
        </div>

        <div className="grid grid-cols-2 gap-4">
          <MetricCard
            icon={<Zap className="w-5 h-5 text-yellow-600" />}
            label="Impact Energy"
            value={`${formatNumber(results.energy)} MT`}
            subtitle="Megatons TNT equivalent"
            tooltip="Total kinetic energy released on impact"
          />

          <MetricCard
            icon={<Mountain className="w-5 h-5 text-purple-600" />}
            label="Crater Diameter"
            value={`${results.craterDiameter.toFixed(1)} km`}
            subtitle={`Depth: ${results.craterDepth.toFixed(1)} km`}
            tooltip="Estimated crater size based on impact conditions"
          />

          <MetricCard
            icon={<Gauge className="w-5 h-5 text-red-600" />}
            label="Seismic Magnitude"
            value={results.seismicMagnitude.toFixed(1)}
            subtitle="Richter scale"
            tooltip="Earthquake magnitude generated by impact"
          />

          <MetricCard
            icon={<Users className="w-5 h-5 text-blue-600" />}
            label="Affected Population"
            value={formatNumber(results.affectedPopulation)}
            subtitle="Within damage zones"
            tooltip="Estimated population in severe damage and thermal zones"
          />
        </div>

        <div className="border-t pt-4 space-y-3">
          <div className="flex justify-between items-center">
            <span className="text-sm font-semibold text-gray-700">Shockwave Radius (20+ psi)</span>
            <span className="text-lg font-bold text-red-600">{results.shockwaveRadius.toFixed(1)} km</span>
          </div>

          <div className="flex justify-between items-center">
            <span className="text-sm font-semibold text-gray-700">Thermal Radiation Radius</span>
            <span className="text-lg font-bold text-orange-600">{results.thermalRadius.toFixed(1)} km</span>
          </div>

          <div className="flex justify-between items-center">
            <span className="text-sm font-semibold text-gray-700">Impact Type</span>
            <span className="text-lg font-bold">
              {results.isOceanImpact ? (
                <span className="flex items-center gap-1 text-blue-600">
                  <Waves className="w-4 h-4" />
                  Ocean Impact
                </span>
              ) : (
                <span className="flex items-center gap-1 text-green-700">
                  <Mountain className="w-4 h-4" />
                  Land Impact
                </span>
              )}
            </span>
          </div>

          {results.isOceanImpact && results.tsunamiHeight && (
            <div className="bg-blue-50 p-3 rounded-lg">
              <div className="flex items-center gap-2 mb-1">
                <Waves className="w-4 h-4 text-blue-600" />
                <span className="text-sm font-semibold text-gray-700">Tsunami Wave Height</span>
              </div>
              <span className="text-2xl font-bold text-blue-600">
                {results.tsunamiHeight.toFixed(1)} meters
              </span>
              <p className="text-xs text-gray-600 mt-1">
                Initial wave height at impact site. Waves will propagate across ocean basins.
              </p>
            </div>
          )}
        </div>

        {mitigation && (
          <div className="border-t pt-4 bg-green-50 p-4 rounded-lg">
            <div className="flex items-center gap-2 mb-3">
              <Shield className="w-5 h-5 text-green-600" />
              <h3 className="font-bold text-gray-800">Mitigation Results</h3>
            </div>

            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <span className="text-sm text-gray-700">Strategy</span>
                <span className="font-semibold text-gray-800">
                  {mitigation.strategy.replace('_', ' ').toUpperCase()}
                </span>
              </div>

              <div className="flex justify-between items-center">
                <span className="text-sm text-gray-700">Success Probability</span>
                <span className={`font-bold ${mitigation.successProbability > 0.7 ? 'text-green-600' : 'text-orange-600'}`}>
                  {(mitigation.successProbability * 100).toFixed(0)}%
                </span>
              </div>

              <div className="flex justify-between items-center">
                <span className="text-sm text-gray-700">Trajectory Deflection</span>
                <span className="font-bold text-blue-600">
                  {mitigation.trajectoryDeflection.toFixed(0)} km
                </span>
              </div>

              <div className="flex justify-between items-center">
                <span className="text-sm text-gray-700">Energy Reduction</span>
                <span className="font-bold text-green-600">
                  {mitigation.energyReduction.toFixed(1)}%
                </span>
              </div>

              <div className="bg-white p-3 rounded mt-2">
                <p className="text-xs text-gray-600">{mitigation.description}</p>
                <p className="text-xs text-gray-500 mt-1">
                  ‚è∞ Minimum warning time: <strong>{mitigation.warningTimeNeeded} years</strong>
                </p>
              </div>
            </div>
          </div>
        )}

        <div className="bg-gray-50 p-3 rounded-lg text-xs text-gray-600">
          <p>
            <strong>Note:</strong> These calculations use simplified scientific models and real-world impacts
            would depend on many additional factors including asteroid composition, atmospheric entry effects,
            and local geology.
          </p>
        </div>
      </div>
    </div>
  );
}

interface MetricCardProps {
  icon: React.ReactNode;
  label: string;
  value: string;
  subtitle: string;
  tooltip?: string;
}

function MetricCard({ icon, label, value, subtitle, tooltip }: MetricCardProps) {
  return (
    <div className="bg-gray-50 p-4 rounded-lg border border-gray-200 hover:border-blue-300 transition-colors" title={tooltip}>
      <div className="flex items-center gap-2 mb-2">
        {icon}
        <span className="text-xs font-semibold text-gray-600">{label}</span>
      </div>
      <div className="text-2xl font-bold text-gray-800 mb-1">{value}</div>
      <div className="text-xs text-gray-500">{subtitle}</div>
    </div>
  );
}
